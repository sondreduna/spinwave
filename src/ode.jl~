# integrators in julia

function heun(t,x,h,f)
    k1 = f(t    ,x)
    k2 = f(t + h, x + k1*h)
    x_ = x + h*(k1+k2)/2
    return x_
end

function euler(t,x,h,f)
    k1 = f(t,x)
    x_ = x + h*k_1
    return x_
end

function rk4(t,x,h,f)
    k1  = f( t      , y           )
    k2  = f( t + h/2, y + k1 * h/2)
    k3  = f( t + h/2, y + k2 * h/2)
    k4  = f( t + h  , y + k3 * h  )

    x_ = x + h*(k1 + 2* k2 + 2*k3 + k4) / 6
    return x_
end

function integrate(X_0,T_0,T_max,h,f,step)
    N = Int(T_max/h)
    shape = X0.size()[1]

    # Adding 2 to N for fractional step at end + initial position
    
    X = zeros((N+2,shape)) 
    T = LinRange(T_0,T_max,N+2)

    t = T_0
    for i âˆˆ 1:N+1
        h = min(h,Tmax - t)
        X[i+1,:] = step(t,X[i,:],t,h,f)
        t += h
    end
    return X,T
end
